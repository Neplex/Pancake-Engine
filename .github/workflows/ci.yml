name: CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - c_compiler: gcc
            cpp_compiler: g++
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          libgl-dev \
          libsfml-dev \
          liblua5.3-dev \
          libtinyxml2-dev \
          libx11-dev \
          build-essential \
          cmake \
          gcc \
          g++ \
          clang \
          doxygen

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -S ${{ github.workspace }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        if: matrix.cpp_compiler == 'g++'
        with:
          languages: c-cpp
          build-mode: manual

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        if: matrix.cpp_compiler == 'g++'
        with:
          category: "/language:c-cpp"

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest
